{"ast":null,"code":"var _jsxFileName = \"/work/sitemap-searcher/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport xml2js from 'xml2js';\nimport SearchBar from './searchBar';\nimport Sitemap from './sitemap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [urls, setUrls] = useState([]);\n  const filteredUrls = urls.filter(url => {\n    if (searchTerm == \"\") return url;else {\n      return url.loc.toString().includes(searchTerm);\n    }\n  });\n  const fetchSitemap = useCallback(() => {\n    fetch(\"https://www.smu.edu.sg/sitemap.xml\").then(res => res.text()).then(data => {\n      var parser = new xml2js.Parser();\n      var jsondata = '';\n      parser.parseString(data, function (err, result) {\n        jsondata = result;\n      });\n      setUrls(jsondata.urlset.url);\n    });\n  }, []);\n  useEffect(() => {\n    fetchSitemap();\n  }, [fetchSitemap]);\n  /*\n  useEffect(() =>{   \n      setFilteredUrls(urls.filter(url => {\n        console.log(\"searchTerm\",searchTerm);\n        if (searchTerm == \"\")\n        return url;\n        else {\n          return (\n            url.loc.toString().includes(searchTerm)\n          );\n        }\n      }));  \n  },[fetchSitemap,urls,searchTerm]);\n  */\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      searchTerm: searchTerm,\n      onSearch: setSearchTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sitemap, {\n      urls: filteredUrls\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"5rhrD91JMqCLuL3JLOO6cZYhDD4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/work/sitemap-searcher/src/App.js"],"names":["useState","useEffect","useCallback","xml2js","SearchBar","Sitemap","App","searchTerm","setSearchTerm","urls","setUrls","filteredUrls","filter","url","loc","toString","includes","fetchSitemap","fetch","then","res","text","data","parser","Parser","jsondata","parseString","err","result","urlset"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAMW,YAAY,GAAGF,IAAI,CAACG,MAAL,CAAYC,GAAG,IAAI;AACtC,QAAIN,UAAU,IAAI,EAAlB,EACE,OAAOM,GAAP,CADF,KAEK;AACH,aACEA,GAAG,CAACC,GAAJ,CAAQC,QAAR,GAAmBC,QAAnB,CAA4BT,UAA5B,CADF;AAGD;AACF,GARoB,CAArB;AAUA,QAAMU,YAAY,GAAGf,WAAW,CAAC,MAAK;AACpCgB,IAAAA,KAAK,CAAC,oCAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEOG,IAAD,IAAU;AACd,UAAIC,MAAM,GAAG,IAAIpB,MAAM,CAACqB,MAAX,EAAb;AACA,UAAIC,QAAQ,GAAG,EAAf;AAEAF,MAAAA,MAAM,CAACG,WAAP,CAAmBJ,IAAnB,EAAyB,UAAUK,GAAV,EAAeC,MAAf,EAAuB;AAC5CH,QAAAA,QAAQ,GAAGG,MAAX;AACH,OAFD;AAGAlB,MAAAA,OAAO,CAACe,QAAQ,CAACI,MAAT,CAAgBhB,GAAjB,CAAP;AACD,KAVD;AAWD,GAZ+B,EAY9B,EAZ8B,CAAhC;AAcAZ,EAAAA,SAAS,CAAC,MAAK;AACbgB,IAAAA,YAAY;AACb,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,sBACI;AAAA,4BACA,QAAC,SAAD;AAAW,MAAA,UAAU,EAAEV,UAAvB;AAAmC,MAAA,QAAQ,EAAEC;AAA7C;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEG;AAAf;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA,kBADJ;AAOD;;GArDQL,G;;KAAAA,G;AAuDT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport xml2js from 'xml2js';\nimport SearchBar from './searchBar';\nimport Sitemap from './sitemap';\n\nfunction App() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [urls, setUrls] = useState([]);\n\n  const filteredUrls = urls.filter(url => {\n    if (searchTerm == \"\")\n      return url;\n    else {\n      return (\n        url.loc.toString().includes(searchTerm)\n      );\n    }\n  });\n\n  const fetchSitemap = useCallback(() =>{\n    fetch(\"https://www.smu.edu.sg/sitemap.xml\")\n    .then(res => res.text())\n    .then((data) => {\n      var parser = new xml2js.Parser();\n      var jsondata = '';\n    \n      parser.parseString(data, function (err, result) {\n          jsondata = result;\n      }); \n      setUrls(jsondata.urlset.url);\n    });\n  },[]);\n\n  useEffect(() =>{  \n    fetchSitemap();\n  }, [fetchSitemap]);\n  \n  /*\n  useEffect(() =>{   \n      setFilteredUrls(urls.filter(url => {\n        console.log(\"searchTerm\",searchTerm);\n        if (searchTerm == \"\")\n        return url;\n        else {\n          return (\n            url.loc.toString().includes(searchTerm)\n          );\n        }\n      }));  \n  },[fetchSitemap,urls,searchTerm]);\n*/\n  return (\n      <>\n      <SearchBar searchTerm={searchTerm} onSearch={setSearchTerm} />\n      <Sitemap urls={filteredUrls} />\n      </>\n    );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}